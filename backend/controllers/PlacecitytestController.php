<?php
namespace backend\controllers;

use app\models\PlaceCity;
use Yii;
use yii\data\ActiveDataProvider;
use yii\data\Pagination;
use yii\helpers\ArrayHelper;
use yii\web\BadRequestHttpException;


class PlacecitytestController extends BaseController //ActiveController
{
    public $modelClass = PlaceCity::class;

    // Some reserved attributes like maybe 'q' for searching all fields at once
    // or 'sort' which is already supported by Yii RESTful API
    public $reservedParams = ['sort','q','page'];

    public function actions() {
        $actions = parent::actions();
        // 'prepareDataProvider' is the only function that need to be overridden here
        $actions['index']['prepareDataProvider'] = [$this, 'indexDataProvider'];
        return $actions;
    }

    public function actionSearch()
    {
        $params = \Yii::$app->request->queryParams;
        echo $params;
        $query = PlaceCity::find();
        $query->andWhere(\Yii::$app->request->get());
        return new ActiveDataProvider([
            'query' => $query,
        ]);

    }

    public function actionSearch2() {
        $params = \Yii::$app->request->queryParams;

        $model = new $this->modelClass;
        // I'm using yii\base\Model::getAttributes() here
        // In a real app I'd rather properly assign
        // $model->scenario then use $model->safeAttributes() instead
        $modelAttr = $model->attributes;

        // this will hold filtering attrs pairs ( 'name' => 'value' )
        $search = [];

        if (!empty($params)) {
            foreach ($params as $key => $value) {
                // In case if you don't want to allow wired requests
                // holding 'objects', 'arrays' or 'resources'
                if(!is_scalar($key) or !is_scalar($value)) {
                    throw new BadRequestHttpException('Bad Request');
                }
                // if the attr name is not a reserved Keyword like 'q' or 'sort' and
                // is matching one of models attributes then we need it to filter results
                if (!in_array(strtolower($key), $this->reservedParams)
                    && ArrayHelper::keyExists($key, $modelAttr, false)) {
                    $search[$key] = $value;
                }
            }
        }

        // you may implement and return your 'ActiveDataProvider' instance here.
        // in my case I prefer using the built in Search Class generated by Gii which is already
        // performing validation and using 'like' whenever the attr is expecting a 'string' value.
        $searchByAttr['name'] = $search;

        $searchModel = new \backend\models\PlacecitySearch();
        return $searchModel->search($searchByAttr);
    }
}